<<<<<<< Updated upstream
## Solution Q1. Basic Univariate Statistics.
```{r}
attach(fifa_players) # Attach Set of R Objects to Search Path
```
a. Make a plot showing the overall ability distribution of all players.
How skewed is the distributions? does it have fat tails?
```{r}
ggplot(data = fifa_players,aes(x = Overall))+
geom_histogram(aes(y=..density..),col = "#00Bfc4", fill = "#00Bfc4", lwd = 0.9,bins = 53,
alpha = 0.2)+ stat_function(fun = dnorm,args = list(mean = mean(Overall),sd = sd(Overall)),
col = "red", lwd = 0.5) + theme_light()+ xlab("Players Overall ability") + labs(title="a. Players Overall density") +
geom_vline(xintercept = median(Overall),col = "blue",lwd = .7) +
geom_vline(xintercept = mean(Overall),col = "green",lwd = .5)
```
In order to see more clearly do a smoothing of the plot.
In the present plot a median and a span have been added, it can be seen that they are almost identical as held in a normal distribution.
```{r}
ggplot(data = fifa_players,aes(x= Overall))  + geom_density(fill="#00Bfc4",alpha=0.2)+
stat_function(fun = dnorm, args = list(mean = mean(fifa_players$Overall), sd = sd(fifa_players$Overall)), col="red", lwd = 0.5) +
xlab("Players Overall ability")+
ylab("density")+
labs(title="a. Players Overall density")+
theme_light()+
scale_colour_economist()
```
We can see that the distribution has slightly long right tail and a short left tail, but the skewed is not high around the mean.
Compared to a normal distribution, it can be seen that the density of "overall distribution" does indeed correspond approximately to a normal density with the values corresponding to the expectation of variance. The anomalies we see with respect to normal density are insignificant so the distribution described well by a Normal distribution.
```{r}
players.Overall <-  fifa_players$Overall[fifa_players$Overall > 0]
knitr::kable(skewness(players.Overall), col.names = NULL, caption = "The skewness is") # skewed
```
Can be measured with the third standardized moment (skewness).
$\hat\mu_3=\frac{\frac{1}{n}\sum _{i=1}^n\left(x_i-x\right)^3\:}{\left[\frac{1}{n}\sum \:_{i=1}^n\left(x_i-x\right)^2\:\right]^{1.5}}$
For a symmetric (e.g. Normal) distribution: $μ_3=0$.
Positive  $μ_3$ indicates long right tail - therefor, theree is a long right tail.
```{r}
zero.Overall <-  fifa_players$WaOverallge[fifa_players$Overall == 0]
knitr::kable(kurtosis(players.Overall) , col.names = NULL, caption = "The kurtosis is") # fat tails of players.Overall
```
The kurtosis is defined as: $κ≡μ_4−3$.
$\hat\mu_4 =\frac{\frac{1}{n}\sum _{i=1}^n\left(x_i-x\right)^4\:}{\left[\frac{1}{n}\sum \:_{i=1}^n\left(x_i-x\right)^2\:\right]^2}$
For the Normal distribution:$κ=0$.
negative $κ$ indicates short tails compared to Normal - therefor, there is a short left tail.
```{r}
#better described by a Normal distribution?
qqnorm(players.Overall)
qqline(players.Overall, col = "red", lwd = 2)
```
plot comparing the overall ability of players in different Continents
b. Make a plot comparing the multiple `overall` ability *distributions* of players according to the `continent` of the players.  Describe which continents have especially good/bad players.
```{r}
# by density:
ggplot(data = fifa_players,aes(x= Overall)) + geom_density(aes(fill= factor(Continent)), alpha=0.2)+
xlab("Players Overall ability")+
ylab("density")+
labs(title="b. Players Overall density")+
facet_wrap(~ Continent, ncol = 3) + geom_vline(xintercept = mean(Overall), col= "red", lwd = 0.5)
```
Since the average of its continents was greater than the overall average, then it can be said that the best continents are South America and Africa.
Better seen by boxplot:
```{r}
# by boxplot:
ggplot(data = fifa_players,aes(x=Continent,y = Overall, color=Continent ))+
geom_boxplot()+
theme_light()+
ylab("Overall")+
coord_flip()+ theme(legend.position="none") +
labs(title="b. Players Overall Quality by Continent")
```
The graphs shows that on average the South American players are better than the rest of the players in the world, and in addition the players from Antarctica are the worst on average.
c. Make a plot showing the density of players' `value` distribution. <br>
Next, make a separate plot showing the density distribution of the *log* of players' `value`. <br>
Which of the two visualizations is better?
```{r}
ggplot(data = fifa_players,aes(x= Value))  + geom_density(fill="#00Bfc4",alpha=0.2)+
xlab("Players Value")+
ylab("density")+
labs(title="c. Players Value")+
theme_light()+
scale_colour_economist()
```
```{r}
# same Value log-transform
ggplot(data = fifa_players,aes(x=Value))+
scale_x_continuous(trans='log10') +  # plot on log-scale
geom_density(fill="#00Bfc4",alpha=0.2)+
labs(title="c. Players Value Distribution (log-scale)")+
theme_light()
```
In the first plot it is hard to see the trends of the value of the players. The differences in the value of the players are high, so there is a "drop" in the plot that makes it impossible to notice subtle trends.
The log function makes the differences become less significant and the trends become more "smooth" and therefore easier to analyze.
d. Are the top-10 players with the highest `value` also the top-10 best players in terms of `overall` ability?
Show tables for both and compare.
```{r}
top_ten_Value <- fifa_players %>% select(Name,Overall, Value) %>% top_n(10, Value) %>% arrange(desc(Value))
knitr::kable(head(top_ten_Value,10), caption = "Most valued players.")
```
```{r}
top_ten_Overall <- fifa_players %>% select(Name, Overall, Value) %>% top_n(10, Overall) %>% arrange(desc(Overall))
knitr::kable(head(top_ten_Overall,10), caption = "Most valued players.")
```
The best player not in the top-10 valued players is: **M. Neuer**.
e. Show a table of the *10* *youngest* and *10* *oldest* teams in terms of *average* players `age`.
```{r}
ten.youngest <- aggregate(Age, by = list(Club), FUN=mean)
colnames(ten.youngest)[2] <- "average_Age"
ten.youngest.teams <- head(arrange(ten.youngest, average_Age),10)
names(ten.youngest.teams)<-c("Team","average Age")
knitr::kable(ten.youngest.teams, caption = "Ten youngest teams in terms of average players age.")
```
```{r}
ten.oldest.teams <- head(arrange(ten.youngest, desc(average_Age)),10)
names(ten.youngest.teams)<-c("Team","average Age")
knitr::kable(ten.youngest.teams, caption = "Ten oldest teams in terms of average players age.")
kable(head(arrange(ten.youngest, desc(average_Age)),10))
```
---
title: "52414: Lab 2"
author: ""
date: "June 1, 2021"
output: html_document
---
## *Lab 2: Visualization Through `ggplot`*
<br/><br/>
**Contents**:
* [Q0. Submission Instructions](#submission-instructions)
* [Q1. Basic Statistics (30 pt)](#basic-statistics)
* [Q2. Scouting Report (30 pt)](#scouting-report)
* [Q3. Model Building (30 pt)](#model-building)
* [Q4. Fix Problematic Plots (10 pt)](#fix-problematic-plots)
<br/><br/>
### Q0.Submission Instructions
This lab will be submitted in pairs using GitHub (if you don't have a pair, please contact us).
Please follow the steps in the  [GitHub-Classroom Lab 2](https://classroom.github.com/g/6_Wy5z44) to create your group's Lab 2 repository.
**Important: your team's name must be `FamilyName1_Name1_and_FamilyName2_Name2`**.
You can collaborate with your partner using the git environment; You can either make commits straight to master, or create individual branches (recommended). However, once done, be sure to merge your branches to master - you will be graded using the most recent *master* version - your last push and merge before the deadline.
**Please do not open/review other peoples' repositories - we will be notified by GitHub if you do.**
Your final push should include this Rmd file (with your answers) together with the html file that is outputted automatically by knitr when you knit the Rmd. Anything else will be disregarded. In addition, please adhere to the following file format:
`Lab_2_FamilyName1_Name1_and_FamilyName2_Name2.Rmd/html`
Some questions may require data wrangling and manipulation which you need to decide on. <br>
In some graphs you may need to change the graph limits. If you do so, please include the outlier
points you have removed in a separate table.
Show numbers in plots/tables using standard digits and not scientific display. That is: 90000000 and not 9e+06. <br>
Round numbers to at most 3 digits after the dot - that is, 9.456 and not 9.45581451044
The required libraries are listed below the instructions. You are allowed to add additional libraries if you want.
If you do so, *please explain what libraries you've added, and what is each new library used for*.
#### Background:
You've been hired as a data analyst at at football (soccer) club.
Since this is a small and under-funded club, you will not have access to real-football data, but to data from
the football computer game fifa18. Your job is to analyze this dataset and extract meaningful insights from the data in order
to help your club make better decisions.
#### Data File:
You will load and analyze the fifa18 football dataset file called "fifa_data.csv". <br>
The dataset contains detailed information about each player in the game, including: names, age, nationality, overall ability, estimated potential ability, current club and league, market value, salary (wage), ability at different football skills (also called 'attributes', e.g. Ball.control, Sprint.speed ...), ability to play at different position in the game (CF, CM, ...) and the preferred positions of the player.
Required Libraries:
```{r echo=TRUE, message=FALSE, warning=FALSE, paged.print=FALSE}
library(ggplot2)
library(dplyr)
library(corrplot)
library(scales)   # needed for formatting y-axis labels to non-scientific type
library(radarchart)
library(tidyr)
library(tidyverse)
library(reshape2) # melt
library(ggthemes)
library(rworldmap) # world map
library(modelr)
library(radarchart) #Spider chart
############################################
library(e1071) #Q1.c -  skewness() and kurtosis()
library(grid) # geom_segment
library(ggrepel)# Use ggrepel::geom_label_repel
library(extrafont) # Changing fonts in ggplot2
loadfonts(device = "win")
library(knitr) # this is used for printing tables with kable
library(tibble) # use it to add a row to a data frame
library(RColorBrewer) # for Choosing a color
options("scipen"=100, "digits"=4)  # avoid scientific display of digits. Take 4 digits.
```
<br/><br/>
## Q1. Basic Univariate Statistics (30 pt)
First, you are requested to load the fifa18 dataset and find and display general information about the players.
a. Make a plot showing the `overall` ability distribution of all players.
How skewed is the distributions? does it have fat tails?  <br>
Plot on top of the `overall` distribution a Normal distribution matching its first two moments. Is the distribution described well by a Normal distribution? explain.
b. Make a plot comparing the multiple `overall` ability *distributions* of players according to the `continent` of the players.  Describe which continents have especially good/bad players.
c. Make a plot showing the density of players' `value` distribution. <br>
Next, make a separate plot showing the density distribution of the *log* of players' `value`. <br>
Which of the two visualizations is better? explain.
d. Are the top-10 players with the highest `value` also the top-10 best players in terms of `overall` ability?
Show tables for both and compare. <br>
Who is the best player not in the top-10 valued players?
e. Show a table of the *10* *youngest* and *10* *oldest* teams in terms of *average* players `age`.
Loading the data:
```{r}
fifa_players <- data.frame(read.csv(url("https://raw.githubusercontent.com/DataScienceHU/DataAnalysisR_2020/master/data/fifa_data.csv")))
#fifa_players <- data.frame(read.csv("../../../../Datasets/fifa_data.csv"))
# Pre-processing:
for (i in c(3,6,7,10:71)) {
fifa_players[,i]<-as.numeric((fifa_players[,i]))
}
fifa<-na.omit(fifa_players)
fifa_players <- fifa
fifa_players_info <- fifa[,c(1:11)] # players general info
fifa_players_attribures <- fifa[,c(1,12:45, 6)] # players different skills. Add overall
fifa_players_positions <- fifa[,c(1,46:72,6,7)] # players ability at different positions . Add overall
fifa_players_indicators <- fifa[,c(1,6,7,10,11)] # players general ability
```
## Solution Q1. Basic Univariate Statistics.
```{r}
attach(fifa_players) # Attach Set of R Objects to Search Path
```
a. Make a plot showing the overall ability distribution of all players.
How skewed is the distributions? does it have fat tails?
```{r}
ggplot(data = fifa_players,aes(x = Overall))+
geom_histogram(aes(y=..density..),col = "#00Bfc4", fill = "#00Bfc4", lwd = 0.9,bins = 53,
alpha = 0.2)+ stat_function(fun = dnorm,args = list(mean = mean(Overall),sd = sd(Overall)),
col = "red", lwd = 0.5) + theme_light()+ xlab("Players Overall ability") + labs(title="a. Players Overall density") +
geom_vline(xintercept = median(Overall),col = "blue",lwd = .7) +
geom_vline(xintercept = mean(Overall),col = "green",lwd = .5)
```
In order to see more clearly do a smoothing of the plot.
In the present plot a median and a span have been added, it can be seen that they are almost identical as held in a normal distribution.
```{r}
ggplot(data = fifa_players,aes(x= Overall))  + geom_density(fill="#00Bfc4",alpha=0.2)+
stat_function(fun = dnorm, args = list(mean = mean(fifa_players$Overall), sd = sd(fifa_players$Overall)), col="red", lwd = 0.5) +
xlab("Players Overall ability")+
ylab("density")+
labs(title="a. Players Overall density")+
theme_light()+
scale_colour_economist()
```
We can see that the distribution has slightly long right tail and a short left tail, but the skewed is not high around the mean.
Compared to a normal distribution, it can be seen that the density of "overall distribution" does indeed correspond approximately to a normal density with the values corresponding to the expectation of variance. The anomalies we see with respect to normal density are insignificant so the distribution described well by a Normal distribution.
```{r}
players.Overall <-  fifa_players$Overall[fifa_players$Overall > 0]
knitr::kable(skewness(players.Overall), col.names = NULL, caption = "The skewness is") # skewed
```
Can be measured with the third standardized moment (skewness).
$\hat\mu_3=\frac{\frac{1}{n}\sum _{i=1}^n\left(x_i-x\right)^3\:}{\left[\frac{1}{n}\sum \:_{i=1}^n\left(x_i-x\right)^2\:\right]^{1.5}}$
For a symmetric (e.g. Normal) distribution: $μ_3=0$.
Positive  $μ_3$ indicates long right tail - therefor, theree is a long right tail.
```{r}
zero.Overall <-  fifa_players$WaOverallge[fifa_players$Overall == 0]
knitr::kable(kurtosis(players.Overall) , col.names = NULL, caption = "The kurtosis is") # fat tails of players.Overall
```
The kurtosis is defined as: $κ≡μ_4−3$.
$\hat\mu_4 =\frac{\frac{1}{n}\sum _{i=1}^n\left(x_i-x\right)^4\:}{\left[\frac{1}{n}\sum \:_{i=1}^n\left(x_i-x\right)^2\:\right]^2}$
For the Normal distribution:$κ=0$.
negative $κ$ indicates short tails compared to Normal - therefor, there is a short left tail.
```{r}
#better described by a Normal distribution?
qqnorm(players.Overall)
qqline(players.Overall, col = "red", lwd = 2)
```
plot comparing the overall ability of players in different Continents
b. Make a plot comparing the multiple `overall` ability *distributions* of players according to the `continent` of the players.  Describe which continents have especially good/bad players.
```{r}
# by density:
ggplot(data = fifa_players,aes(x= Overall)) + geom_density(aes(fill= factor(Continent)), alpha=0.2)+
xlab("Players Overall ability")+
ylab("density")+
labs(title="b. Players Overall density")+
facet_wrap(~ Continent, ncol = 3) + geom_vline(xintercept = mean(Overall), col= "red", lwd = 0.5)
```
Since the average of its continents was greater than the overall average, then it can be said that the best continents are South America and Africa.
Better seen by boxplot:
```{r}
# by boxplot:
ggplot(data = fifa_players,aes(x=Continent,y = Overall, color=Continent ))+
geom_boxplot()+
theme_light()+
ylab("Overall")+
coord_flip()+ theme(legend.position="none") +
labs(title="b. Players Overall Quality by Continent")
```
The graphs shows that on average the South American players are better than the rest of the players in the world, and in addition the players from Antarctica are the worst on average.
c. Make a plot showing the density of players' `value` distribution. <br>
Next, make a separate plot showing the density distribution of the *log* of players' `value`. <br>
Which of the two visualizations is better?
```{r}
ggplot(data = fifa_players,aes(x= Value))  + geom_density(fill="#00Bfc4",alpha=0.2)+
xlab("Players Value")+
ylab("density")+
labs(title="c. Players Value")+
theme_light()+
scale_colour_economist()
```
```{r}
# same Value log-transform
ggplot(data = fifa_players,aes(x=Value))+
scale_x_continuous(trans='log10') +  # plot on log-scale
geom_density(fill="#00Bfc4",alpha=0.2)+
labs(title="c. Players Value Distribution (log-scale)")+
theme_light()
```
In the first plot it is hard to see the trends of the value of the players. The differences in the value of the players are high, so there is a "drop" in the plot that makes it impossible to notice subtle trends.
The log function makes the differences become less significant and the trends become more "smooth" and therefore easier to analyze.
d. Are the top-10 players with the highest `value` also the top-10 best players in terms of `overall` ability?
Show tables for both and compare.
```{r}
top_ten_Value <- fifa_players %>% select(Name,Overall, Value) %>% top_n(10, Value) %>% arrange(desc(Value))
knitr::kable(head(top_ten_Value,10), caption = "Most valued players.")
```
```{r}
top_ten_Overall <- fifa_players %>% select(Name, Overall, Value) %>% top_n(10, Overall) %>% arrange(desc(Overall))
knitr::kable(head(top_ten_Overall,10), caption = "Most valued players.")
```
The best player not in the top-10 valued players is: **M. Neuer**.
e. Show a table of the *10* *youngest* and *10* *oldest* teams in terms of *average* players `age`.
```{r}
ten.youngest <- aggregate(Age, by = list(Club), FUN=mean)
colnames(ten.youngest)[2] <- "average_Age"
ten.youngest.teams <- head(arrange(ten.youngest, average_Age),10)
names(ten.youngest.teams)<-c("Team","average Age")
knitr::kable(ten.youngest.teams, caption = "Ten youngest teams in terms of average players age.")
```
```{r}
ten.oldest.teams <- head(arrange(ten.youngest, desc(average_Age)),10)
names(ten.youngest.teams)<-c("Team","average Age")
knitr::kable(ten.youngest.teams, caption = "Ten oldest teams in terms of average players age.")
kable(head(arrange(ten.youngest, desc(average_Age)),10))
```
ten.oldest.teams <- head(arrange(ten.youngest, desc(average_Age)),10)
names(ten.youngest.teams)<-c("Team","average Age")
knitr::kable(ten.youngest.teams, caption = "Ten oldest teams in terms of average players age.")
kable(head(arrange(ten.youngest, desc(average_Age)),10))
ten.oldest.teams
ten.oldest.teams <- head(arrange(ten.youngest, desc(average_Age)),10)
names(ten.oldest.teams)<-c("Team","average Age")
knitr::kable(ten.oldest.teams, caption = "Ten oldest teams in terms of average players age.")
average_Overall_Age <- aggregate(Overall, by = list(Age), FUN = mean)
P + geom_line(data= subset(average_Overall_Age, Group.1<=35), aes(x=Group.1,y=x), color ="red") + geom_point(data= subset(average_Overall_Age, Group.1<=35), aes(x=Group.1,y=x)) + geom_vline(xintercept = c(16), color = "#00Bfc4") + geom_text(x=20, y=70 , label="players for future \n development",size = 4, family="mono") + geom_text(x=33.5, y=75.5, label="red line is \n Overall average ",size = 3, family="mono", color = "red") +
geom_text(x=33.5, y=73, label="black line is \n Potential average ",size = 3, family="mono", color = "black")
average_Ponalties_Age <- aggregate(Potential, by = list(Age), FUN = mean)
P <- ggplot(data= subset(average_Ponalties_Age, Group.1<=35), aes(x=Group.1,y=x)) + geom_line() +
geom_point() + theme_light() +
labs(title="2.a Average potential ability by Age for Players under 35") + xlab("Age") + ylab("Ponalties")
P
average_Overall_Age <- aggregate(Overall, by = list(Age), FUN = mean)
P + geom_line(data= subset(average_Overall_Age, Group.1<=35), aes(x=Group.1,y=x), color ="red") + geom_point(data= subset(average_Overall_Age, Group.1<=35), aes(x=Group.1,y=x)) + geom_vline(xintercept = c(16), color = "#00Bfc4") + geom_text(x=20, y=70 , label="players for future \n development",size = 4, family="mono") + geom_text(x=33.5, y=75.5, label="red line is \n Overall average ",size = 3, family="mono", color = "red") +
geom_text(x=33.5, y=73, label="black line is \n Potential average ",size = 3, family="mono", color = "black")
# adding a new column that is the difference between the Potential and Overall.
fifa_players <-  mutate(fifa_players ,diff_Overall_Potential = Potential - Overall)
# Make an average calculation
Diff_Overall_Potential <- aggregate(fifa_players$diff_Overall_Potential, by = list(Age), FUN = mean)
# Make a plot as required.
ggplot(data = subset(Diff_Overall_Potential,Group.1<=35),aes(x=Group.1,y=x))+
geom_line() +geom_point() + labs(title="2.b. average Difference between a players overall ability to potential ability by age") +
xlab("Age")+
ylab("Potential vs Overall") + theme_light() + geom_vline(xintercept = c(16), color = "#00Bfc4") + geom_text(x=20, y=2, label="players for future \n development",size = 4, family="mono")
knitr::kable(team)
fifa_players_positions_subset <-  left_join(fifa_players_info[,c(1,2)], fifa_players_positions,"ID")
positions <- fifa_players_positions_subset[3:28]
best = data.frame(Name = NA, position = NA,Overall = NA)
for (i in 3:28) {
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]),Overall)
colnames(a) <- c("Name","position","Overall")
best <- data.frame(rbind(as.matrix(best),as.matrix(a)))
}
gk <- filter(fifa_players_positions_subset,Preferred.Positions=="GK ")
gk <- gk %>% select(Name,Overall) %>% arrange(desc(Overall)) %>% head(1)
team <- rbind(best %>% filter(duplicated(Name) == FALSE) %>% arrange(desc(Overall)) %>% head(10) %>% select(Name,Overall),gk)
team <- transform(team, Overall = as.numeric(Overall))
average  <- data.frame(Name = "Team average" ,Overall = mean(team$Overall))
team <- rbind(team,average )
knitr::kable(team)
fifa_at <- left_join(fifa_players_info[,c(1,2)], fifa_players_attribures[-36],"ID")
s.plot <- function(i){
player_name <- team[i,1]
colum <- colnames(fifa_players_attribures[-c(1,36)])
first_pleyer <- fifa_at %>% filter(Name== player_name) %>% select(all_of(colum)) %>% as.matrix() %>% t() %>% as.data.frame()
top_att <- first_pleyer %>% arrange(desc(V1)) %>% head(10)
colnames(top_att) <- player_name
top_att <- cbind(row.names(top_att),top_att)
return(chartJSRadar(top_att))}
s.plot(1)
s.plot(2)
s.plot(3)
s.plot(4)
s.plot(5)
s.plot(11)
=======
# Find table with best residuals
knitr::kable(potential %>% arrange(desc(resid)) %>% select(Name, Age, Potential, Overall, resid, Value, real_Value) %>% head(10))
# add_residuals of potential.fit
potential <-  mutate(potential , resid = round(resid(potential.fit), 3))
potential <-  mutate(potential , real_Value  = round(potential.fit$fitted.values, 3))
# Find table with best residuals
knitr::kable(potential %>% arrange(desc(resid)) %>% select(Name, Age, Potential, Overall, resid, Value, real_Value) %>% head(10))
# add_residuals of potential.fit
potential <-  mutate(potential , resid = round(resid(potential.fit), 3))
potential <-  mutate(potential , real_Value  = round(potential.fit$fitted.values, 3))
# Find table with best residuals
knitr::kable(potential %>% arrange((resid)) %>% select(Name, Age, Potential, Overall, resid, Value, real_Value) %>% head(10))
# add_residuals of potential.fit
potential <-  mutate(potential , resid = round(resid(potential.fit), 3))
potential <-  mutate(potential , predicted_Value  = round(potential.fit$fitted.values, 3))
# Find table with best residuals
knitr::kable(potential %>% arrange((resid)) %>% select(Name, Age, Potential, Overall, resid, Value, predicted_Value) %>% head(10))
# add_residuals of potential.fit
potential <-  mutate(potential , resid = round(resid(potential.fit), 3))
potential <-  mutate(potential , predicted_Value  = round(potential.fit$fitted.values, 3))
# Find table with best residuals
knitr::kable(potential %>% arrange(desc(resid)) %>% select(Name, Age, Potential, Overall, resid, Value, predicted_Value) %>% head(10))
model <- lm(Overall~Wage+Age,data = fifa_players_info)
fifa_players_info["prediction"] <- predict(model,fifa_players_info)
fifa_players_info["difference"] <- fifa_players_info$Overall - fifa_players_info$prediction
knitr::kable(top_n(fifa_players_info,10,difference) %>% select(Name,Overall,prediction,difference) %>% arrange(desc(difference)))
for (i in 3:28) {
answer = data.frame()
a <- fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]) %>% select(Name)
print(a)
}
for (i in 3:28) {
answer = data.frame()
a <- fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]) %>% select(Name)
answer %>% add_row(a)
}
for (i in 3:28) {
answer = data.frame()
a <- fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]) %>% select(Name)
print(a)
}
for (i in 3:28) {
answer = data.frame()
a <- fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]) %>% select(Name)
}
a
answer = data.frame(Name)
answer
answer = data.frame()
answer
for (i in 3:28) {
Name <- c()
answer = data.frame(Name)
a <- fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]) %>% select(Name)
answer %>% add_row(a)
}
player
player <- c()
answer = data.frame(player)
answer
colname(answer)
colnames(answer)
head(answer)
answer = data.frame(player=NA)
answer
#  add a column of the Potential value in order to median each country's players
fifa.3c <- fifa
fifa.3c <-  mutate(fifa.3c , med = Potential)
nationality <- aggregate(med ~ Nationality, data = fifa.3c, FUN = median)
# median United kingdom we'll have to median the players in each part
median.UK <- median(nationality$med[which(nationality$Nationality=="England"|nationality$Nationality=="Wales"|nationality$Nationality=="Scotland"|nationality$Nationality=="Republic of Ireland")])
# add a row of united kingdom with the median.
nationality <- add_row(.data = nationality, Nationality = "United Kingdom", med = median.UK)
# deleting the rows of England, Wales, Scotland and Republic of Ireland
nationality <- nationality[-which(nationality$Nationality=="England"|nationality$Nationality=="Wales"| nationality$Nationality=="Scotland"|nationality$Nationality=="Republic of Ireland"),]
#creating the map
sPDF  <- joinCountryData2Map(dF = nationality, joinCode = "NAME", nameJoinColumn = "Nationality",verbose=F) # Prepare data to plot
#ploting the world map:
colourPalette <- brewer.pal(7,'RdYlGn') # Choosing a color
mapCountryData(sPDF,nameColumnToPlot="med",colourPalette=colourPalette,catMethod='fixedWidth', mapTitle = "d. median potential of players by country")
#  add a column of the Potential value in order to median each country's players
fifa.3c <- fifa
fifa.3c <-  mutate(fifa.3c , med = Potential)
nationality <- aggregate(med ~ Nationality, data = fifa.3c, FUN = median)
# median United kingdom we'll have to median the players in each part
median.UK <- median(nationality$med[which(nationality$Nationality=="England"|nationality$Nationality=="Wales"|nationality$Nationality=="Scotland"|nationality$Nationality=="Republic of Ireland")])
# add a row of united kingdom with the median.
nationality <- add_row(.data = nationality, Nationality = "United Kingdom", med = median.UK)
# deleting the rows of England, Wales, Scotland and Republic of Ireland
nationality <- nationality[-which(nationality$Nationality=="England"|nationality$Nationality=="Wales"| nationality$Nationality=="Scotland"|nationality$Nationality=="Republic of Ireland"),]
#creating the map
sPDF  <- joinCountryData2Map(dF = nationality, joinCode = "NAME", nameJoinColumn = "Nationality",verbose=F) # Prepare data to plot
#ploting the world map:
colourPalette <- brewer.pal(7,'RdYlGn') # Choosing a color
mapCountryData(sPDF,nameColumnToPlot="med",colourPalette=colourPalette,catMethod='fixedWidth', mapTitle = "d. median potential of players by country")
answer = data.frame(player=c())
answer
for (i in 3:28) {
#  player <- c()
answer = data.frame(player=c())
a <- fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]) %>% select(Name)
answer %>% add_row(a)
}
for (i in 3:28) {
#  player <- c()
answer = data.frame(player=c())
a <- fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]) %>% select(Name)
answer<- rbind(answer,a)
}
answer
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]) %>% select(Name)
player <- c(player,a)
}
player
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]) %>% select(Name)
print(a)
player <- c(player,a)
}
class(a)
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- as.vector(fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]) %>% select(Name))
#  print(a)
player <- c(player,a)
}
player
player
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- as.vector(fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]) %>% select(Name))
#  print(a)
player <- cbind(player,a)
}
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- as.vector(fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]) %>% select(Name))
#  print(a)
player <- cbind(player,a)
}
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- as.vector(fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]) %>% select(Name))
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]) %>% select(Name,fifa_players_positions_subset[i]))
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]) %>% select(Name,fifa_players_positions_subset))
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]) %>% select(fifa_players_positions_subset[i]))
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]) %>% select(Name))
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i]))
print(a)
#  player <- c(player,a)
}
fifa_players_positions[3]
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(fifa_players_positions_subset[i])
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(fifa_players_positions_subset[i])
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(fifa_players_positions_subset[i])
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(fifa_players_positions_subset[i])
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(fifa_players_positions_subset[i])
print(a)
#  player <- c(player,a)
}
}
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(fifa_players_positions_subset[i])
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
player <- c()
answer = data.frame(player=c())
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name)
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
player <- c()
answer = data.frame()
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,fifa_players_positions_subset[i])
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
player <- c()
answer = data.frame()
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,fifa_players_positions_subset[as.integer(i))
for (i in 3:28) {
player <- c()
answer = data.frame()
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,fifa_players_positions_subset[as.integer(i)])
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
player <- c()
answer = data.frame()
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,fifa_players_positions_subset[as.numeric(i)])
print(a)
#  player <- c(player,a)
}
knitr::kable(top_n(perform_corlation,10,average) %>% select(average) %>% arrange(desc(average)))
`vector``
c
```{r}
for (i in 3:28) {
player <- c()
answer = data.frame()
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,fifa_players_positions_subset[[i]])
print(a)
#  player <- c(player,a)
}
fifa_players_positions_subset <-  left_join(fifa_players_info[,c(1,2)], fifa_players_positions,"ID")
positions <- fifa_players_positions_subset[3:28]
for (i in 3:28) {
player <- c()
answer = data.frame()
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,fifa_players_positions_subset[[i]])
print(a)
#  player <- c(player,a)
}
fifa_players_positions
fifa_players_positions_subset
for (i in 3:28) {
#  player <- c()
#  answer = data.frame()
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,fifa_players_positions_subset[[i]])
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
#  player <- c()
#  answer = data.frame()
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,fifa_players_positions_subset[i])
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
#  player <- c()
#  answer = data.frame()
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,fifa_players_positions_subset[1])
print(a)
#  player <- c(player,a)
}
colnames(fifa_players_positions_subset[2])
colnames(fifa_players_positions_subset[5])
for (i in 3:28) {
#  player <- c()
#  answer = data.frame()
a <- (fifa_players_positions_subset %>% top_n(1,colnames(fifa_players_positions_subset[i]))) %>% select(Name,fifa_players_positions_subset[1])
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
#  player <- c()
#  answer = data.frame()
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]))
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
#  player <- c()
answer = data.frame(Name = NA, positions= NA)
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]))
answer <- rbind(a, answer)
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
#  player <- c()
answer = data.frame(Name = NA, positions= NA)
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]))
answer <- rbind(answer, a)
print(a)
#  player <- c(player,a)
}
a
for (i in 3:28) {
#  player <- c()
answer = data.frame(Name = NA)
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]))
answer <- rbind(answer, a)
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
#  player <- c()
answer = data.frame(Name = NA, position = NA)
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i])) %>% colnames <- c("Name","position")
answer <- rbind(answer, a)
print(a)
#  player <- c(player,a)
}
for (i in 3:28) {
#  player <- c()
answer = data.frame(Name = NA, position = NA)
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]))
colnames(a) <- c("Name","position")
answer <- rbind(answer, a)
print(a)
#  player <- c(player,a)
}
answer
knitr::kable(top_n(perform_corlation,10,average) %>% select(average) %>% arrange(desc(average)))
`vector``
c
```{r}
for (i in 3:28) {
#  player <- c()
answer = data.frame(Name = NA, position = NA)
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]))
colnames(a) <- c("Name","position")
answer <- cbind(answer, a)
print(a)
#  player <- c(player,a)
}
answer
for (i in 3:28) {
#  player <- c()
answer = data.frame(Name = NA, position = NA)
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]))
colnames(a) <- c("Name","position")
answer <- cbind(answer, a)
print(answer)}
for (i in 3:28) {
#  player <- c()
answer = data.frame(Name = NA, position = NA)
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]))
colnames(a) <- c("Name","position")
answer <- merge(answer, a)
print(answer)}
for (i in 3:28) {
#  player <- c()
answer = data.frame(Name = NA, position = NA)
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]))
colnames(a) <- c("Name","position")
answer <- cbind(answer, a)
#  print(answer)}
for (i in 3:28) {
#  player <- c()
answer = data.frame(Name = NA, position = NA)
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]))
colnames(a) <- c("Name","position")
answer <- cbind(answer, a)
#  print(answer)}
}
}
xs
for (i in 3:28) {
#  player <- c()
answer = data.frame(Name = NA, position = NA)
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]))
colnames(a) <- c("Name","position")
answer <- cbind(answer, a)
#  print(answer)}
}
answer
for (i in 3:28) {
#  player <- c()
answer = data.frame(Name = NA, position = NA)
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]))
colnames(a) <- c("Name","position")
answer <- rbind(answer, a)
#  print(answer)}
}
answer
a
answer %>% add_row(Name = "messi" , position = "1000" )
answer[nrow(answer) + 1,] = list(Name="hallo",position="1000")
answer
answer[nrow(answer) + 1,] = list(a)
a[Name]
a[1]
for (i in 3:28) {
#  player <- c()
answer = data.frame(Name = NA, position = NA)
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]))
colnames(a) <- c("Name","position")
answer <- data.frame(rbind(as.matrix(answer),as.matrix(a)))
#  print(answer)}
}
answer
answer = data.frame(Name = NA, position = NA)
for (i in 3:28) {
#  player <- c()
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]))
colnames(a) <- c("Name","position")
answer <- data.frame(rbind(as.matrix(answer),as.matrix(a)))
#  print(answer)}
}
answer
answer = data.frame(Name = c(), position = c())
for (i in 3:28) {
#  player <- c()
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]))
colnames(a) <- c("Name","position")
answer <- data.frame(rbind(as.matrix(answer),as.matrix(a)))
#  print(answer)}
}
answer = data.frame(Name = NA, position = NA)
for (i in 3:28) {
#  player <- c()
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]))
colnames(a) <- c("Name","position")
answer <- data.frame(rbind(as.matrix(answer),as.matrix(a)))
#  print(answer)}
}
answer
knitr::kable(top_n(perform_corlation,10,average) %>% select(average) %>% arrange(desc(average)))
`vector`
fifa_players_positions_subset <-  left_join(fifa_players_info[,c(1,2)], fifa_players_positions,"ID")
positions <- fifa_players_positions_subset[3:28]
#max.positions <- apply(positions,2,function(col) )
top_n(fifa_players_positions_subset,1,CAM)
answer = data.frame(Name = NA, position = NA,Overall = NA)
for (i in 3:28) {
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]),Overall)
colnames(a) <- c("Name","position","Overall")
answer <- data.frame(rbind(as.matrix(answer),as.matrix(a)))
}
answer
fifa_players_positions_subset <-  left_join(fifa_players_info[,c(1,2)], fifa_players_positions,"ID")
positions <- fifa_players_positions_subset[3:28]
answer = data.frame(Name = NA, position = NA,Overall = NA)
for (i in 3:28) {
a <- (fifa_players_positions_subset %>% top_n(1,fifa_players_positions_subset[i])) %>% select(Name,colnames(fifa_players_positions_subset[i]),Overall)
colnames(a) <- c("Name","position","Overall")
answer <- data.frame(rbind(as.matrix(answer),as.matrix(a)))
}
answer
fifa_players_positions_subset$Preferred.Positions=="GK"
fifa_players_positions_subset %>% Preferred.Positions=="GK"
fifa_players_positions_subset %>% select(Preferred.Positions=="GK")
gk <- fifa_players_positions_subset %>% filter(Preferred.Positions=="GK")
gk
gk
gk <- filter(fifa_players_positions_subset,Preferred.Positions=="GK")
gk
gk <- filter(fifa_players_positions,Preferred.Positions=="GK")
gk
fifa_players_positions_subset$Preferred.Positions
gk <- filter(fifa_players_positions,Preferred.Positions=="GK ")
gk
length(gk)
gk %>% select(Name,Overall) %>% arrange(desc(Overall))
gk <- filter(fifa_players_positions_subset,Preferred.Positions=="GK ")
gk %>% select(Name,Overall) %>% arrange(desc(Overall))
gk
gk <- gk %>% select(Name,Overall) %>% arrange(desc(Overall))
gk
>>>>>>> Stashed changes
